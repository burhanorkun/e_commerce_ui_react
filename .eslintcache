[{"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/index.js":"1","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/reportWebVitals.js":"2","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/App.js":"3","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Footer.js":"4","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Login.js":"5","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/ProductList.js":"6","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Header.js":"7","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/NotFound.js":"8","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Cart.js":"9","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/ProductDetail.js":"10","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Orders.js":"11","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/hooks/useToken.js":"12","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/hooks/CartContext.js":"13","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/Auth.js":"14","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Products.js":"15","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/CartClient.js":"16","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/ProductClient.js":"17","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Button.js":"18","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/CustomerClient.js":"19","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/CartItem.js":"20","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/OrderClient.js":"21","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/Config.js":"22","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/ProductCard.js":"23"},{"size":500,"mtime":1643188015530,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1643188015530,"results":"26","hashOfConfig":"25"},{"size":2067,"mtime":1643188015510,"results":"27","hashOfConfig":"25"},{"size":893,"mtime":1643188015520,"results":"28","hashOfConfig":"25"},{"size":6346,"mtime":1643188015520,"results":"29","hashOfConfig":"25"},{"size":1535,"mtime":1645375801250,"results":"30","hashOfConfig":"25"},{"size":10684,"mtime":1643188015520,"results":"31","hashOfConfig":"25"},{"size":391,"mtime":1643188015520,"results":"32","hashOfConfig":"25"},{"size":7863,"mtime":1643188015520,"results":"33","hashOfConfig":"25"},{"size":4821,"mtime":1643188015520,"results":"34","hashOfConfig":"25"},{"size":4760,"mtime":1643188015520,"results":"35","hashOfConfig":"25"},{"size":515,"mtime":1643188015530,"results":"36","hashOfConfig":"25"},{"size":1435,"mtime":1643188015530,"results":"37","hashOfConfig":"25"},{"size":2533,"mtime":1643188015520,"results":"38","hashOfConfig":"25"},{"size":258,"mtime":1643188015520,"results":"39","hashOfConfig":"25"},{"size":2449,"mtime":1643188015520,"results":"40","hashOfConfig":"25"},{"size":1555,"mtime":1643188015520,"results":"41","hashOfConfig":"25"},{"size":698,"mtime":1643188015520,"results":"42","hashOfConfig":"25"},{"size":1138,"mtime":1643188015520,"results":"43","hashOfConfig":"25"},{"size":2758,"mtime":1643188015520,"results":"44","hashOfConfig":"25"},{"size":1908,"mtime":1643188015520,"results":"45","hashOfConfig":"25"},{"size":1595,"mtime":1643188015520,"results":"46","hashOfConfig":"25"},{"size":3605,"mtime":1643188015520,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d0h7ph",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/index.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/reportWebVitals.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/App.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Footer.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Login.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/ProductList.js",["100"],"import { useEffect, useState } from \"react\";\nimport CartClient from \"../api/CartClient\";\nimport ProductClient from \"../api/ProductClient\";\nimport { updateCart, useCartContext } from \"../hooks/CartContext\";\nimport Products from \"./Products\";\n\nconst ProductList = ({ auth }) => {\n  const [productList, setProductList] = useState();\n  const [noRecMsg, setNoRecMsg] = useState(\"Loading...\");\n  const { dispatch } = useCartContext();\n\n  useEffect(() => {\n    async function fetchProducts() {\n      const res = await new ProductClient().fetchList();\n      if (res && res.success) {\n        setProductList(res.data);\n      } else {\n        setNoRecMsg(res);\n      }\n    }\n    async function fetchCart(auth) {\n      const res = await new CartClient(auth).fetch();\n      if (res && res.success) {\n        console.log(res.data);\n        dispatch(updateCart(res.data.items));\n        if (res.data?.items && res.data.items?.length < 1) {\n          setNoRecMsg(\"Cart is empty.\");\n        }\n      } else {\n        setNoRecMsg(res && typeof res === \"string\" ? res : res?.error?.message);\n      }\n    }\n    if (auth?.token) fetchCart(auth);\n    fetchProducts();\n  }, []);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n      {productList ? (\n        <div className=\"flex flex-wrap -mx-1 lg:-mx-4\">\n          <Products auth={auth} productList={productList ? productList : []} />\n        </div>\n      ) : (\n        <div className=\"text-lg font-semibold\">{noRecMsg}</div>\n      )}\n    </div>\n  );\n};\nexport default ProductList;\n","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Header.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/NotFound.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Cart.js",["101","102"],"import { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport CartClient from \"../api/CartClient\";\nimport CustomerClient from \"../api/CustomerClient\";\nimport OrderClient from \"../api/OrderClient\";\nimport { removeItem, updateCart, useCartContext } from \"../hooks/CartContext\";\nimport CartItem from \"./CartItem\";\n\nconst Cart = ({ auth }) => {\n  const [grandTotal, setGrandTotal] = useState(0);\n  const [noRecMsg, setNoRecMsg] = useState(\"Loading...\");\n  const history = useHistory();\n  const cartClient = new CartClient(auth);\n  const orderClient = new OrderClient(auth);\n  const customerClient = new CustomerClient(auth);\n  const { cartItems, dispatch } = useCartContext();\n\n  const calTotal = (items) => {\n    let total = 0;\n    items?.forEach((i) => (total = total + i?.unitPrice * i?.quantity));\n    return total.toFixed(2);\n  };\n\n  const increaseQty = async (id) => {\n    const idx = cartItems.findIndex((i) => i.id === id);\n    if (~idx) {\n      cartItems[idx].quantity = cartItems[idx].quantity + 1;\n      const res = await cartClient.addOrUpdate(cartItems[idx]);\n      if (res && res.success) {\n        console.log(res.data);\n        refreshCart(res.data);\n        if (res.data?.length < 1) {\n          setNoRecMsg(\"Cart is empty.\");\n        }\n      } else {\n        setNoRecMsg(res && typeof res === \"string\" ? res : res.error.message);\n      }\n    }\n  };\n\n  const decreaseQty = async (id) => {\n    const idx = cartItems.findIndex((i) => i.id === id);\n    if (~idx && cartItems[idx].quantity <= 1) {\n      return deleteItem(id);\n    } else if (cartItems[idx]?.quantity > 1) {\n      cartItems[idx].quantity = cartItems[idx].quantity - 1;\n      const res = await cartClient.addOrUpdate(cartItems[idx]);\n      if (res && res.success) {\n        refreshCart(res.data);\n        if (res.data?.length < 1) {\n          setNoRecMsg(\"Cart is empty.\");\n        }\n        return;\n      } else {\n        setNoRecMsg(res && typeof res === \"string\" ? res : res?.error?.message);\n      }\n    }\n  };\n\n  const deleteItem = async (id) => {\n    const idx = cartItems.findIndex((i) => i.id === id);\n    if (~idx) {\n      const res = await cartClient.remove(cartItems[idx].id);\n      if (res && res.success) {\n        dispatch(removeItem(idx));\n        if (res.data?.length < 1) {\n          setNoRecMsg(\"Item is removed.\");\n        }\n      } else {\n        setNoRecMsg(\n          res && typeof res === \"string\"\n            ? res\n            : \"There is an error performing the remove.\"\n        );\n      }\n    }\n  };\n\n  const refreshCart = (items) => {\n    setGrandTotal(calTotal(items));\n    dispatch(updateCart(items));\n  };\n\n  useEffect(() => {\n    async function fetch() {\n      const res = await cartClient.fetch();\n      if (res && res.success) {\n        console.log(res.data);\n        refreshCart(res.data.items);\n        if (res.data?.items && res.data.items?.length < 1) {\n          setNoRecMsg(\"Cart is empty.\");\n        }\n      } else {\n        setNoRecMsg(res && typeof res === \"string\" ? res : res.error.message);\n      }\n    }\n    fetch();\n  }, []);\n\n  const checkout = async () => {\n    const res = await customerClient.fetch();\n    if (res && res.success) {\n      const payload = {\n        address: { id: res.data.addressId },\n        card: { id: res.data.cardId },\n      };\n      const orderRes = await orderClient.add(payload);\n      if (orderRes && orderRes.success) {\n        history.push(\"/orders\");\n      } else {\n        setNoRecMsg(\n          orderRes && typeof orderRes === \"string\"\n            ? orderRes\n            : \"Couldn't process checkout.\"\n        );\n      }\n    } else {\n      setNoRecMsg(\n        res && typeof res === \"string\" ? res : \"error retreiving customer\"\n      );\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n      <div className=\"flex shadow-md my-4\">\n        <div className=\"w-3/4 bg-gray-100 px-10 py-5\">\n          <div className=\"flex justify-between border-b pb-8\">\n            <h1 className=\"font-semibold text-2xl\">Shopping Cart</h1>\n            <h2 className=\"font-semibold text-2xl\">\n              {cartItems?.length} Items\n            </h2>\n          </div>\n          <div className=\"flex mt-10 mb-5\">\n            <h3 className=\"font-semibold text-gray-600 text-xs uppercase w-2/5\">\n              Product Details\n            </h3>\n            <h3 className=\"font-semibold text-center text-gray-600 text-xs uppercase w-1/5\">\n              Quantity\n            </h3>\n            <h3 className=\"font-semibold text-center text-gray-600 text-xs uppercase w-1/5\">\n              Price\n            </h3>\n            <h3 className=\"font-semibold text-center text-gray-600 text-xs uppercase w-1/5\">\n              Total\n            </h3>\n          </div>\n          {cartItems && cartItems.length > 0 ? (\n            cartItems?.map((i) => (\n              <CartItem\n                item={i}\n                key={i.id}\n                increaseQty={increaseQty}\n                decreaseQty={decreaseQty}\n                removeItem={deleteItem}\n              />\n            ))\n          ) : (\n            <div className=\"flex items-center hover:bg-gray-200 -mx-6 px-6 py-5\">\n              {noRecMsg}\n            </div>\n          )}\n          <Link\n            to=\"/\"\n            className=\"flex font-semibold text-indigo-600 text-sm mt-10\"\n          >\n            <svg\n              className=\"fill-current mr-2 text-indigo-600 w-4\"\n              viewBox=\"0 0 448 512\"\n            >\n              <path d=\"M134.059 296H436c6.627 0 12-5.373 12-12v-56c0-6.627-5.373-12-12-12H134.059v-46.059c0-21.382-25.851-32.09-40.971-16.971L7.029 239.029c-9.373 9.373-9.373 24.569 0 33.941l86.059 86.059c15.119 15.119 40.971 4.411 40.971-16.971V296z\" />\n            </svg>\n            Continue Shopping\n          </Link>\n        </div>\n\n        <div id=\"summary\" className=\"bg-gray-50 w-1/4 px-8 py-10\">\n          <h1 className=\"font-semibold text-2xl border-b pb-8\">\n            Order Summary\n          </h1>\n          <div className=\"flex justify-between mt-10 mb-5\">\n            <span className=\"font-semibold text-sm uppercase\">\n              Items {cartItems?.length}\n            </span>\n            <span className=\"font-semibold text-sm\">${grandTotal}</span>\n          </div>\n          <div>\n            <label className=\"font-medium inline-block mb-3 text-sm uppercase\">\n              Shipping\n            </label>\n            <select className=\"block p-2 text-gray-600 w-full text-sm\">\n              <option>Free shipping - $0.00</option>\n            </select>\n          </div>\n          <div className=\"py-10\">\n            <label\n              htmlFor=\"promo\"\n              className=\"font-semibold inline-block mb-3 text-sm uppercase\"\n            >\n              Promo Code\n            </label>\n            <input\n              type=\"text\"\n              id=\"promo\"\n              placeholder=\"Enter your code\"\n              className=\"p-2 text-sm w-full cursor-not-allowed\"\n              disabled\n            />\n          </div>\n          <button\n            className=\"bg-red-500 hover:bg-red-600 px-5 py-2 text-sm text-white uppercase cursor-not-allowed disabled:opacity-50\"\n            disabled\n          >\n            Apply\n          </button>\n          <div className=\"border-t mt-8\">\n            <div className=\"flex font-semibold justify-between py-6 text-sm uppercase\">\n              <span>Total cost</span>\n              <span>${grandTotal}</span>\n            </div>\n            <button\n              className=\"bg-indigo-500 font-semibold hover:bg-indigo-600 py-3 text-sm text-white uppercase w-full disabled:opacity-50\"\n              onClick={checkout}\n              disabled={grandTotal == 0 ? true : false}\n            >\n              Checkout\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;\n","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/ProductDetail.js",["103","104"],"import { useEffect, useState } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport ProductClient from \"../api/ProductClient\";\nimport CartClient from \"../api/CartClient\";\nimport { updateCart, useCartContext } from \"../hooks/CartContext\";\n\nconst ProductDetail = ({ auth }) => {\n  const { id } = useParams();\n  const [product, setProduct] = useState({});\n  const [msg, setMsg] = new useState(\"\");\n  const history = new useHistory();\n  const { cartItems, dispatch } = useCartContext();\n  const cartClient = new CartClient(auth);\n\n  const callAddItemApi = async () => {\n    const qty = findQty(product.id);\n    return cartClient.addOrUpdate({\n      id: product.id,\n      quantity: qty + 1,\n      unitPrice: product.price,\n    });\n  };\n\n  const findQty = (id) => {\n    const idx = cartItems.findIndex((i) => i.id === id);\n    if (~idx) {\n      return cartItems[idx].quantity;\n    }\n    return 0;\n  };\n\n  const checkLogin = () => {\n    if (!auth.token) {\n      history.push(\"/login\");\n      return false;\n    }\n    return true;\n  };\n\n  const add = async () => {\n    const isLoggedIn = checkLogin();\n    if (isLoggedIn && product?.id) {\n      const res = await callAddItemApi();\n      if (res && res.success) {\n        console.log(res.data);\n        if (res.data?.length > 0) {\n          setMsg(\"Product added to bag.\");\n          dispatch(updateCart(res.data));\n        }\n      } else {\n        setMsg(res && typeof res === \"string\" ? res : res.error.message);\n      }\n    }\n  };\n\n  const buy = async () => {\n    const isLoggedIn = checkLogin();\n    if (isLoggedIn && product?.id) {\n      const res = await callAddItemApi();\n      if (res && res.success) {\n        history.push(\"/cart\");\n      } else {\n        setMsg(res && typeof res === \"string\" ? res : res.error.message);\n      }\n    }\n  };\n\n  useEffect(() => {\n    async function getProduct(id) {\n      const client = new ProductClient();\n      const res = await client.fetch(id);\n      if (res && res.success) {\n        setProduct(res.data);\n      }\n    }\n    async function fetchCart(auth) {\n      const res = await new CartClient(auth).fetch();\n      if (res && res.success) {\n        console.log(res.data);\n        dispatch(updateCart(res.data.items));\n      }\n    }\n    if (auth?.token) fetchCart(auth);\n    getProduct(id);\n  }, [id]);\n\n  return (\n    <div\n      id={product?.id}\n      className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 my-1 w-full md:w-1/2 lg:my-4\"\n    >\n      <figure className=\"bg-gray-100 rounded-xl p-8 md:p-0 xs:flex md:block\">\n        <img\n          className=\"w-72 h-72 mx-auto\"\n          src={product?.imageUrl}\n          alt={product?.name}\n        />\n        <div className=\"pt-4 md:p-6 text-center xs:pl-2 md:text-left space-y-4\">\n          <form className=\"flex-auto\">\n            <div className=\"flex flex-wrap items-center justify-between\">\n              <h1 className=\"w-full flex-none font-bold mb-2.5 text-left\">\n                <Link to=\"/\">{product?.name}</Link>\n              </h1>\n              <div className=\"text-4xl leading-7 font-bold text-purple-600\">\n                {\"$\"}\n                {product?.price?.toFixed(2)}\n              </div>\n              <div className=\"text-sm font-medium text-gray-400 ml-3\">\n                In stock\n              </div>\n            </div>\n            <div className=\"font-semibold pt-8\">{product?.description}</div>\n\n            {product && product.tag ? (\n              <div className=\"font-semibold py-8 flex flex-row flex-wrap\">\n                {\" \"}\n                {product?.tag?.map((t) => (\n                  <div>\n                    <span className=\"bg-yellow-400 p-2 rounded-2xl\">\n                      {t.name}{\" \"}\n                    </span>\n                    &nbsp;\n                  </div>\n                ))}{\" \"}\n              </div>\n            ) : (\n              \"\"\n            )}\n            <div className=\"flex space-x-3 mt-8 mb-4 text-sm font-semibold\">\n              <div className=\"flex-auto flex justify-between\">\n                <button\n                  className=\"w-1/2 flex items-center justify-center rounded-full bg-purple-700 text-white py-2 md:w-1/4\"\n                  type=\"button\"\n                  onClick={buy}\n                >\n                  Buy now\n                </button>\n                <button\n                  className=\"flex items-center justify-center rounded-full bg-purple-50 text-purple-700\"\n                  type=\"button\"\n                  onClick={add}\n                >\n                  Add to bag\n                </button>\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-500 text-left\">\n              Free shipping on all local orders.\n            </p>\n          </form>\n        </div>\n      </figure>\n    </div>\n  );\n};\n\nexport default ProductDetail;\n","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Orders.js",["105"],"import { useEffect, useState } from \"react\";\nimport OrderClient from \"../api/OrderClient\";\n\nconst Orders = ({ auth }) => {\n  const [orders, setOrders] = useState([]);\n\n  const formatDate = (dt) => {\n    return dt && new Date(dt).toLocaleString();\n  };\n\n  useEffect(() => {\n    async function fetchOrders() {\n      const client = new OrderClient(auth);\n      const res = await client.fetch();\n      if (res && res.success) {\n        console.log(res.data);\n        setOrders(res.data);\n      }\n    }\n    fetchOrders();\n  }, []);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n      <div className=\"flex flex-col\">\n        <div className=\"overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"py-4 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >\n                      Order Date\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >\n                      Order Items\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"pl-8 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >\n                      Status\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >\n                      Order Amount\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {orders && orders.length < 1 ? (\n                    <tr className=\"px-6 py-4 whitespace-nowrap\">\n                      Found zero order\n                    </tr>\n                  ) : (\n                    orders?.map((order) => (\n                      <tr>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900\">\n                            {formatDate(order?.date)}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Local Time\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className=\"\">\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {order?.items.map((o, idx) => (\n                                  <div>\n                                    <span className=\"text-sm text-gray-500\">\n                                      {idx + 1}.\n                                    </span>{\" \"}\n                                    {o.name}{\" \"}\n                                    <span className=\"text-xs font-normal text-gray-500\">\n                                      (\n                                      {o?.quantity +\n                                        \" x $\" +\n                                        o?.unitPrice?.toFixed(2)}\n                                      )\n                                    </span>\n                                    <br />\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                            {order?.status}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-gray-500\">\n                          ${order?.total?.toFixed(2)}\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Orders;\n","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/hooks/useToken.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/hooks/CartContext.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/Auth.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Products.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/CartClient.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/ProductClient.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/Button.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/CustomerClient.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/CartItem.js",["106"],"import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst CartItem = ({ item, increaseQty, decreaseQty, removeItem }) => {\n  //const [item, setItem] = useState(cartItem);\n  const des = item ? item.description?.split(\".\") : [];\n  const author = des && des.length > 0 ? des[des.length - 1] : \"\";\n  const [total, setTotal] = useState();\n\n  const calTotal = (item) => {\n    setTotal((item?.unitPrice * item?.quantity)?.toFixed(2));\n  };\n\n  const updateQty = (qty) => {\n    if (qty === -1) {\n      decreaseQty(item?.id);\n    } else if (qty === 1) {\n      increaseQty(item?.id);\n    } else {\n      return false;\n    }\n    calTotal(item);\n  };\n\n  useEffect(() => {\n    calTotal(item);\n  }, []);\n\n  return (\n    <div className=\"flex items-center hover:bg-gray-200 -mx-8 px-6 py-5\">\n      <div className=\"flex w-2/5\">\n        <div className=\"w-32\">\n          <img className=\"h-24\" src={item?.imageUrl} alt=\"\" />\n        </div>\n        <div className=\"flex flex-col justify-between ml-4 flex-grow\">\n          <Link\n            to={\"/products/\" + item.id}\n            className=\"font-bold text-sm text-indigo-500 hover:text-indigo-700\"\n          >\n            {item?.name}\n          </Link>\n          <span className=\"text-xs\">Author: {author}</span>\n          <button\n            className=\"font-semibold hover:text-red-500 text-indigo-500 text-xs text-left\"\n            onClick={() => removeItem(item.id)}\n          >\n            Remove\n          </button>\n        </div>\n      </div>\n      <div className=\"flex items-center justify-center w-1/5\">\n        <span className=\"cursor-pointer\" onClick={() => updateQty(-1)}>\n          <svg className=\"fill-current text-gray-600 w-3\" viewBox=\"0 0 448 512\">\n            <path d=\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\" />\n          </svg>\n        </span>\n\n        <input\n          className=\"mx-2 border text-center w-8\"\n          type=\"text\"\n          readOnly\n          value={item?.quantity}\n        />\n        <span className=\"cursor-pointer\" onClick={() => updateQty(1)}>\n          <svg className=\"fill-current text-gray-600 w-3\" viewBox=\"0 0 448 512\">\n            <path d=\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\" />\n          </svg>\n        </span>\n      </div>\n      <span className=\"text-center w-1/5 font-semibold text-sm\">\n        {item?.unitPrice?.toFixed(2)}\n      </span>\n      <span className=\"text-center w-1/5 font-semibold text-sm\">${total}</span>\n    </div>\n  );\n};\n\nexport default CartItem;\n","/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/OrderClient.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/api/Config.js",[],"/Volumes/Extreme SSD/technical ebook/Modern API Dev with Spring Boot/Modern-API-Development-with-Spring-and-Spring-Boot-main/Chapter07/ecomm-ui/src/components/ProductCard.js",["107"],"import { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport CartClient from \"../api/CartClient\";\nimport { updateCart, useCartContext } from \"../hooks/CartContext\";\n\nconst ProductCard = ({ auth, product }) => {\n  const history = new useHistory();\n  const cartClient = new CartClient(auth);\n  const { cartItems, dispatch } = useCartContext();\n  const [msg, setMsg] = new useState(\"\");\n\n  const callAddItemApi = async () => {\n    const qty = findQty(product.id);\n    return cartClient.addOrUpdate({\n      id: product.id,\n      quantity: qty + 1,\n      unitPrice: product.price,\n    });\n  };\n\n  const findQty = (id) => {\n    const idx = cartItems.findIndex((i) => i.id === id);\n    if (~idx) {\n      return cartItems[idx].quantity;\n    }\n    return 0;\n  };\n\n  const checkLogin = () => {\n    if (!auth.token) {\n      history.push(\"/login\");\n      return false;\n    }\n    return true;\n  };\n\n  const add = async () => {\n    const isLoggedIn = checkLogin();\n    if (isLoggedIn && product?.id) {\n      const res = await callAddItemApi();\n      if (res && res.success) {\n        console.log(res.data);\n        if (res.data?.length > 0) {\n          setMsg(\"Product added to bag.\");\n          dispatch(updateCart(res.data));\n        }\n      } else {\n        setMsg(res && typeof res === \"string\" ? res : res.error.message);\n      }\n    }\n  };\n\n  const buy = async () => {\n    const isLoggedIn = checkLogin();\n    if (isLoggedIn && product?.id) {\n      const res = await callAddItemApi();\n      if (res && res.success) {\n        history.push(\"/cart\");\n      } else {\n        setMsg(res && typeof res === \"string\" ? res : res.error.message);\n      }\n    }\n  };\n\n  return (\n    <div\n      id={product.id}\n      className=\"my-1 px-1 w-full md:w-1/2 lg:my-4 lg:px-4 lg:w-1/3\"\n    >\n      <figure className=\"bg-gray-100 rounded-xl p-8 md:p-0 xs:flex md:block\">\n        <img\n          className=\"w-72 h-72 mx-auto\"\n          src={product.imageUrl}\n          alt={product.name}\n        />\n        <div className=\"pt-4 md:p-6 text-center xs:pl-2 md:text-left space-y-4\">\n          <form className=\"flex-auto\">\n            <div className=\"flex flex-wrap items-center justify-between\">\n              <h1 className=\"w-full flex-none font-bold mb-2.5 text-left\">\n                <Link to={`/products/${product.id}`}>{product.name}</Link>\n              </h1>\n              <div className=\"text-4xl leading-7 font-bold text-purple-600\">\n                {\"$\"}\n                {product.price.toFixed(2)}\n              </div>\n              <div className=\"text-sm font-medium text-gray-400 ml-3\">\n                In stock\n              </div>\n            </div>\n            <div className=\"flex space-x-3 mt-8 mb-4 text-sm font-semibold\">\n              <div className=\"flex-auto flex justify-between\">\n                <button\n                  className=\"w-1/2 flex items-center justify-center rounded-full bg-purple-700 text-white py-2\"\n                  type=\"button\"\n                  onClick={buy}\n                >\n                  Buy now\n                </button>\n                <button\n                  className=\"flex items-center justify-center rounded-full bg-purple-50 text-purple-700\"\n                  type=\"button\"\n                  onClick={add}\n                >\n                  Add to bag\n                </button>\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-500 text-left\">\n              Free shipping on all local orders.\n            </p>\n          </form>\n        </div>\n      </figure>\n    </div>\n  );\n};\n\nexport default ProductCard;\n",{"ruleId":"108","severity":1,"message":"109","line":35,"column":6,"nodeType":"110","endLine":35,"endColumn":8,"suggestions":"111"},{"ruleId":"108","severity":1,"message":"112","line":98,"column":6,"nodeType":"110","endLine":98,"endColumn":8,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":224,"column":36,"nodeType":"116","messageId":"117","endLine":224,"endColumn":38},{"ruleId":"118","severity":1,"message":"119","line":10,"column":10,"nodeType":"120","messageId":"121","endLine":10,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":85,"column":6,"nodeType":"110","endLine":85,"endColumn":10,"suggestions":"122"},{"ruleId":"108","severity":1,"message":"123","line":21,"column":6,"nodeType":"110","endLine":21,"endColumn":8,"suggestions":"124"},{"ruleId":"108","severity":1,"message":"125","line":27,"column":6,"nodeType":"110","endLine":27,"endColumn":8,"suggestions":"126"},{"ruleId":"118","severity":1,"message":"119","line":10,"column":10,"nodeType":"120","messageId":"121","endLine":10,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["127"],"React Hook useEffect has missing dependencies: 'cartClient' and 'refreshCart'. Either include them or remove the dependency array.",["128"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'msg' is assigned a value but never used.","Identifier","unusedVar",["129"],"React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.",["130"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array.",["131"],{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [auth, dispatch]",{"range":"142","text":"143"},"Update the dependencies array to be: [cartClient, refreshCart]",{"range":"144","text":"145"},"Update the dependencies array to be: [auth, dispatch, id]",{"range":"146","text":"147"},"Update the dependencies array to be: [auth]",{"range":"148","text":"149"},"Update the dependencies array to be: [item]",{"range":"150","text":"151"},[1151,1153],"[auth, dispatch]",[3085,3087],"[cartClient, refreshCart]",[2316,2320],"[auth, dispatch, id]",[522,524],"[auth]",[718,720],"[item]"]